<!DOCTYPE html>
<html>
<head>
  <title>Sistema Prueba</title>
  <!-- Importo el módulo socket.io que tengo en el proyecto -->
    <script src="/javascripts/socket.io.js"></script>
    <script src="https://code.jquery.com/jquery.js"></script>
    <!-- Importo el archivo Javascript de Highcharts directamente desde su servidor -->
    <!--<script src="http://code.highcharts.com/highcharts.js" type="application/javascript"></script>-->
    <script src="http://code.highcharts.com/stock/highstock.js"></script>

    <!-- Latest compiled and minified JavaScript -->
    <script src="//netdna.bootstrapcdn.com/bootstrap/3.0.2/js/bootstrap.min.js"></script>
    <script src="http://code.highcharts.com/modules/exporting.js"></script>

  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">

  <script type="text/javascript">
    
    $(document).ready(function(){
    $('.filterable .btn-filter').click(function(){
        var $panel = $(this).parents('.filterable'),
        $filters = $panel.find('.filters input'),
        $tbody = $panel.find('.table tbody');
        if ($filters.prop('disabled') == true) {
            $filters.prop('disabled', false);
            $filters.first().focus();
        } else {
            $filters.val('').prop('disabled', true);
            $tbody.find('.no-result').remove();
            $tbody.find('tr').show();
        }
    });

    $('.filterable .filters input').keyup(function(e){
        /* Ignore tab key */
        var code = e.keyCode || e.which;
        if (code == '9') return;
        /* Useful DOM data and selectors */
        var $input = $(this),
        inputContent = $input.val().toLowerCase(),
        $panel = $input.parents('.filterable'),
        column = $panel.find('.filters th').index($input.parents('th')),
        $table = $panel.find('.table'),
        $rows = $table.find('tbody tr');
        /* Dirtiest filter function ever ;) */
        var $filteredRows = $rows.filter(function(){
            var value = $(this).find('td').eq(column).text().toLowerCase();
            return value.indexOf(inputContent) === -1;
        });
        /* Clean previous no-result if exist */
        $table.find('tbody .no-result').remove();
        /* Show all rows, hide filtered ones (never do that outside of a demo ! xD) */
        $rows.show();
        $filteredRows.hide();
        /* Prepend no-result row if all rows are filtered */
        if ($filteredRows.length === $rows.length) {
            $table.find('tbody').prepend($('<tr class="no-result text-center"><td colspan="'+ $table.find('.filters th').length +'">No result found</td></tr>'));
        }
    });
});

  </script>

  <style type="text/css">
    
    .filterable {
    margin-top: 15px;
}
.filterable .panel-heading .pull-right {
    margin-top: -20px;
}
.filterable .filters input[disabled] {
    background-color: transparent;
    border: none;
    cursor: auto;
    box-shadow: none;
    padding: 0;
    height: auto;
}
.filterable .filters input[disabled]::-webkit-input-placeholder {
    color: #333;
}
.filterable .filters input[disabled]::-moz-placeholder {
    color: #333;
}
.filterable .filters input[disabled]:-ms-input-placeholder {
    color: #333;
}

  </style>
</head>
<body>
<nav class="navbar navbar-default">
        <div class="container">
           <ul class="nav nav-pills">
              <li role="presentation"><a href="/">Inicio</a></li>
              <li role="presentation" class="active"><a href="/perfil">Perfil</a></li>
              <li role="presentation"><a href="/alta">Subir</a></li>
              <li role="presentation"><a href="/lista">Listado Peliculas / Series</a></li>
              <li role="presentation"><a href="#">Contacto</a></li>
          </ul>
        </div>
      </nav>

<div class="jumbotron text-center col-md-12">

  <h1>Bienvenido señor <%= user.local.username %></h1>
  <h2>Usted vive en: <%= user.local.country %></h2>
  <a href="/logout" class="btn btn-danger">Salir</a>
</div>

<div class="container col-md-12">

<div class="row col-md-4">
<div class="panel panel-primary filterable">
            <div class="panel-heading">
                <h3 class="panel-title">Últimas 5 Subidas</h3>
                <div class="pull-right">
                    <button class="btn btn-default btn-xs btn-filter"><span class="glyphicon glyphicon-filter"></span> Buscar</button>
                </div>
            </div>
            <table class="table">
                <thead>
                    <tr class="filters">
                        <th><input type="text" class="form-control" placeholder="ID" disabled></th>
                        <th><input type="text" class="form-control" placeholder="Titulo" disabled></th>
                        <th><input type="text" class="form-control" placeholder="Tipo" disabled></th>
                        <th><input type="text" class="form-control" placeholder="Username" disabled></th>
                    </tr>
                </thead>
                <tbody>
                <% if(person.length>0){%>
                  <% for(var i=0; i<person.length; i++) {%>
                    <tr>
                        <td><%= person[i].id %></td>
                        <td><%= person[i].nombre %></td>
                        <td><%= person[i].tipo %></td>
                        <td>@mdo</td>
                    </tr>
                    <% } %>
                  <%} else {%>
                <p class="alert alert-warning">No hay nadda</p>
                <% } %>
                </tbody>
            </table>
        </div>
</div>
</div>

<div class="container col-md-12">

    
  <div class="page-header">
  <h2>Estadisticas del Servidor <small> // Carga CPU, Consumo de RAM y Procesos activos.</small></h2>
</div>

  <div class="row marketing">
      <div class="col-lg-4">
        <div class="panel panel-primary">
          <div class="panel-heading"><strong>Información General</strong></div>
          <div class="panel-body" style="background: #7CB5EC; color: #fff; font-weight: 600;font-size: 15px;"><p  id="p_hostname">Estado del Server. Consumos.</p>
            <p  id="p_kernel"></p>
            <p  id="p_uptime"></p>
            <div>
                <b>Lista de Procesos:</b>
                <ol id="toplist">
                </ol>
            </div>
          </div>
        </div>
      </div>

      <div class="col-md-8">
        <div class="panel panel-success">
          <div class="panel-heading">
            <h3 class="panel-title" style="text-align: center;">Temperatura CPU</h3>
            
          </div>
          <div class="panel-body" style="background: #EEE; padding-top: 35px; padding-bottom: 35px;">
          
          <div class="container" id="chart" style="width:100%; height:300px;"></div>
          </div>
          
        </div>
      </div>
      
  </div>

  <div class="row marketing">

      <div class="col-md-6">
        <div class="panel panel-success">
          <div class="panel-heading">
            <h3 class="panel-title">Memoria Total</h3>
            
          </div>
          <div class="panel-body">
          <div id="chartMemory" style="min-width: 100; height:250px; margin: 0 auto"></div>
        <!--<div class="container" id="chart" style="width:100%; height:300px;"></div>-->
          
          </div>
          
        </div>
      </div>

      <div class="col-md-6">
        <div class="panel panel-success">
          <div class="panel-heading">
            <h3 class="panel-title">Carga CPU</h3>
            
          </div>
          <div class="panel-body">
          <div class="container" id="cpu_usage" style="width:100%; height:300px;"></div>
          
          </div>
          
        </div>
      </div>

  </div>
</div>

 <!-- Comienza el Javascript -->
    <script>
    // Creo un WebSocket. Pone la IP del servidor y puerto 4000. 
    var socket = io.connect('http://loganserver.hopto.org:4000');
    //console.log(location.host)
    // Creo un nuevo objeto 'Chart'
    var chart, chartCPU, chartMem, memTotal;
    chart = new Highcharts.StockChart({
        chart: {
            renderTo: 'chart', 
            defaultSeriesType: 'spline',
            events: {
                load: function() {
                    // Cada vez que reciba un valor desde el socket, lo meto en la gráfica
                    socket.on('temperatureUpdate', function (time, data) {
                        var series = chart.series[0];
                        series.addPoint([time, data]);
                    });
                }
            }
        },
        rangeSelector : {
            selected : 100
        },
        title: {
            //text: 'Temperatura CPU'
        },
        xAxis: {
            type: 'datetime',
            tickPixelInterval: 150,
            maxZoom: 20 * 1000
        },
        yAxis: {
            minPadding: 0.2,
            maxPadding: 0.2,
            title: {
                text: 'Temperatura ºC',
                margin: 10
            }
        },
        series: [{
            name: 'Temperatura',
            data: []
        }],
        credits: {
                enabled: false
        }
    });

      chartCPU = new Highcharts.StockChart({
        chart: {
            renderTo: 'cpu_usage', 
            defaultSeriesType: 'spline',
            events: {
                load: function() {
                    // Cada vez que reciba un valor desde el socket, lo meto en la gráfica
                    socket.on('cpuUsageUpdate', function (time, data) {
                        var series = chartCPU.series[0];
                        series.addPoint([time, data]);
                    });
                }
            }
        },
        rangeSelector : {
            selected : 100
        },
        title: {
            //text: 'Carga CPU'
        },
        xAxis: {
            type: 'datetime',
            tickPixelInterval: 150,
            maxZoom: 20 * 1000
        },
        yAxis: {
            minPadding: 0.2,
            maxPadding: 0.2,
            title: {
                text: 'Carga CPU (%)',
                margin: 10
            }
        },
        series: [{
            name: 'CPU Load',
            data: []
        }],
        credits: {
                enabled: false
        }
    });

    chartMem = new Highcharts.Chart({
            chart: {
                renderTo: 'chartMemory',
                type: 'bar',
                events: {
                load: function() {
                    // Cada vez que reciba un valor desde el socket, lo meto en la gráfica
                    socket.on('memoryUpdate', function (free, used, buffered, cached) {
                        chartMem.series[0].setData([{y: used, color: 'red'}, {y: free, color: 'green'}, {y: buffered, color: 'blue'}, {y: cached, color: 'orange'}]);
                      });
                    }
                  }
            },
            title: {
                text: 'Memoria RAM'
            },
            xAxis: {
                categories: ['Usado', 'Libre', 'Buffered', 'Cache'],
                title: {
                    text: null
                }
            },
            yAxis: {
                min: 0,
                title: {
                    text: "Porcentaje",
                    align: 'high'
                },
                labels: {
                    overflow: 'justify'
                }
            },
            tooltip: {
                valueSuffix: ' %'
            },
            plotOptions: {
                bar: {
                    dataLabels: {
                        enabled: true
                    }
                }
            },            
            credits: {
                enabled: false
            },
            series: [{
                name: "Memoria",
                data: [{y: 0, color: 'red'}, {y: 0, color: 'green'}, {y: 0, color: 'blue'}, {y: 0, color: 'orange'}]
            }]
        });
        socket.on('hostname', function (hname) {
          document.getElementById("p_hostname").innerHTML="<b>Nombre Host:</b> "+hname;
        });
        socket.on('kernel', function (ker) {
          document.getElementById("p_kernel").innerHTML="<b>Kernel:</b> "+ker;
        }); 
        socket.on('uptime', function (uptime) {
          document.getElementById("p_uptime").innerHTML="<b>Activo:</b> "+ uptime;
        }); 
        socket.on('toplist', function (toplist) {
            var res = toplist.split("\n");
            var result = "";
            for (r in res) {
              if (res[r] != "") {
                  result = result + "<li>" + res[r] + "</li>"
            }
            }
            document.getElementById("toplist").innerHTML=result;
        });
        socket.on('memoryTotal', function (mem) {
          chartMem.setTitle({text:"Memoria Total: "+mem+" KB"});
          memTotal = mem;
        });
    </script>

</body>
</html>
